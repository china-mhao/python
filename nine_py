#9-1

class Dog():
	"""简单的Dog类"""
	
	def __init__(self, name,age):
		"""初始化属性name和age"""
		self.name = name
		self.age =age
	
	def sit(self):
		"""命令小狗坐下"""
		print(self.name.title()+' is now sitting.')	

	def roll_over(self):
		"""命令小狗在地上打滚"""
		print(self.name.title()+' roll over.')

my_dog = Dog('rio',8)

print('\n\tMy dog\'s name is:'+my_dog.name.title()+'.')
print('\n\tMy dog age is:'+str(my_dog.age)+'.')

my_dog.sit()
my_dog.roll_over()


#9-1\9-2练习题
class Restaurant():
	"""定义类Restaurant"""
	def __init__(self, restaurant_name,cuisine_type):
		self.restaurant_name = restaurant_name
		self.cuisine_type = cuisine_type
		self.number_served = 0

	#打印餐馆的名字和类型；	
	def describe_restaurant(self):
		print('\n\t餐馆名字：'+self.restaurant_name.title()+'.')
		print('\t餐馆类型：'+self.cuisine_type.title()+'.')

	#指出餐馆正在营业；	
	def open_restaurant(self):
		print('\t"'+self.restaurant_name.title()+'"正在营业，欢迎光临.')

	def read_number_served(self):
		print('\t目前就餐人数：' + str(self.number_served) + '.')

	def get_number_served(self,user_number):
		self.number_served = user_number

	def increment_number_served(self,increase_user_number):
		self.number_served += increase_user_number


my_restaurant = Restaurant('kfc','western food')
#firend_restaurant = Restaurant('川流不息','chinese food')

#实例
my_restaurant.describe_restaurant()
my_restaurant.open_restaurant()

my_restaurant.get_number_served(user_number=8)
my_restaurant.read_number_served()
my_restaurant.increment_number_served(increase_user_number=90)
my_restaurant.read_number_served()

#实例
#firend_restaurant.describe_restaurant()
#firend_restaurant.open_restaurant()



#9-3、9-5练习题
class User():
	"""docstring for User"""
	def __init__(self, first_name,last_name,professional,age,login_attempts):
		self.first_name = first_name
		self.last_name = last_name
		self.professional = professional
		self.age = age
		self.login_attempts = login_attempts

	def describe_user(self):
		full_name = self.first_name + ' ' + self.last_name
		print('\n"' + full_name.title() + '":是一名' + self.professional.title() + '，年纪' + str(self.age) + '.')

	def greet_user(self):
		full_name = self.first_name + ' ' + self.last_name
		print('"' + full_name.title() + '"，您很受大家的欢迎.')

	def increment_login_attempts(self):
		self.login_attempts += 1	
		print('\t登录次数：' + str(self.login_attempts) + '.')

	def reset_login_attempts(self):
		if int(self.login_attempts) > 0:
			self.login_attempts = 0
			print('\n\t重置登录次数，现在登录次数为：' + str(self.login_attempts) + '.')

lee = User('jony','black','singer',26,1)
lee.describe_user()
lee.greet_user()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.increment_login_attempts()
lee.reset_login_attempts()


#chinses_people = User('amy','green','学生','18')
#chinses_people.describe_user()
#chinses_people.greet_user() 


#9.3 继承

#9.2.1

class Car():
	"""docstring for Car"""
	def __init__(self, make,model,year):
		"""初始化汽车的属性;"""
		self.make = make
		self.model = model
		self.year = year
		self.odometer_reading = 60

	def get_descriptive_name(self):
		long_name = '\n\t' + str(self.year) + ' ' + self.make.title() + ' ' + self.model.title() + '.'
		return long_name

	def read_odometer(self):
		print('\t车辆里程目前为：' + str(self.odometer_reading) + '.') 

	def update_odometer(self,milage):
		if milage >= self.odometer_reading:
			self.odometer_reading = milage
		else:
			print('\t不能修改汽车里程.')

	def increment_odometer(self,mile):
		if mile > 0:
			self.odometer_reading += mile
		else:
			print('\t修改不成功.')

class Battery():
	"""docstring for Battery"""
	def __init__(self,battery_size=70):
		self.battery_size = battery_size

	def describe_battery(self):
		print(str(self.battery_size) + '-KWH.')
		

#my_new_car = Car('audi','a7','2017')
#my_new_car.year = 2018
#print(my_new_car.get_descriptive_name())

#my_new_car.update_odometer(milage=999)
#my_new_car.read_odometer()

#my_new_car.increment_odometer(mile=1)
#my_new_car.read_odometer()
class ElectricCar(Car):
	"""docstring for ElectricCar"""
	def _init_(self,make,model,year):
		"""初始化父类的属性"""
		super()._init_(make,model,year)

		self.battery = Battery()


my_tesla = ElectricCar('tesla','model s',2018)

print(my_tesla.get_descriptive_name())		
my_tesla.battery.describe_battery()

